{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.isLoggedIn = new BehaviorSubject(false);\n  }\n  signup(email, password, username) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAtnAe9A6iL6yvELIgbdwScKXXN1SyNWvo', {\n      username: username,\n      email: email,\n      password: password,\n      returnSecureToken: true\n    });\n  }\n  login(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAtnAe9A6iL6yvELIgbdwScKXXN1SyNWvo', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    });\n  }\n  setLoggedIn(value) {\n    this.isLoggedIn.next(value);\n  }\n  getLoggedIn() {\n    return this.isLoggedIn.asObservable();\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["BehaviorSubject","AuthService","constructor","http","isLoggedIn","signup","email","password","username","post","returnSecureToken","login","setLoggedIn","value","next","getLoggedIn","asObservable","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Skyr\\Desktop\\Filmixx-master\\Filmixx-master\\filmix-frontend\\filmix\\src\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { BehaviorSubject } from 'rxjs';\n\n\n export interface AuthResponseData \n{\n    kind: string;\n    idToken: string;\n    email:string;\n    username: string;\n    refreshToken:string;\n    expiresIn:string;\n    localId: string;\n    registered?: boolean;\n\n    // properties to get from request, response\n}\n\n \n @Injectable({providedIn: 'root'})\n\n export class AuthService {\n    private isLoggedIn = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {}\n\n\n    signup(email: string, password:string, username: string)\n    {\n        return this.http.post<AuthResponseData>('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAtnAe9A6iL6yvELIgbdwScKXXN1SyNWvo',\n        {\n            username: username,\n            email: email,\n            password: password,\n            returnSecureToken:true\n        }\n        );\n    }\n\n\n    login(email: string,password: string)\n    {\nreturn this.http.post<AuthResponseData>('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAtnAe9A6iL6yvELIgbdwScKXXN1SyNWvo',\n{\n    email: email,\n    password: password,\n    returnSecureToken:true\n});\n\n\n    }\n    setLoggedIn(value: boolean) {\n        this.isLoggedIn.next(value);\n      }\n    \n      getLoggedIn() {\n        return this.isLoggedIn.asObservable();\n      }\n\n}"],"mappings":"AAEA,SAASA,eAAe,QAAQ,MAAM;;;AAoBrC,OAAM,MAAOC,WAAW;EAGrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,UAAU,GAAG,IAAIJ,eAAe,CAAU,KAAK,CAAC;EAEjB;EAGvCK,MAAMA,CAACC,KAAa,EAAEC,QAAe,EAAEC,QAAgB;IAEnD,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAmB,uGAAuG,EAC/I;MACID,QAAQ,EAAEA,QAAQ;MAClBF,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA,QAAQ;MAClBG,iBAAiB,EAAC;KACrB,CACA;EACL;EAGAC,KAAKA,CAACL,KAAa,EAACC,QAAgB;IAExC,OAAO,IAAI,CAACJ,IAAI,CAACM,IAAI,CAAmB,mHAAmH,EAC3J;MACIH,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA,QAAQ;MAClBG,iBAAiB,EAAC;KACrB,CAAC;EAGE;EACAE,WAAWA,CAACC,KAAc;IACtB,IAAI,CAACT,UAAU,CAACU,IAAI,CAACD,KAAK,CAAC;EAC7B;EAEAE,WAAWA,CAAA;IACT,OAAO,IAAI,CAACX,UAAU,CAACY,YAAY,EAAE;EACvC;;AApCQf,WAAW,C;mBAAXA,WAAW,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXnB,WAAW,C;SAAXA,WAAW;EAAAoB,OAAA,EAAXpB,WAAW,CAAAqB,IAAA;EAAAC,UAAA,EAFC;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}